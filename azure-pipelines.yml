# .NET Core

# execute on all branches
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - "*"
    exclude:
      - "azure-pipelines.yml"

pool:
  name: Azure Pipelines
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  hangfireProject: 'DIGNDB.APP.SmitteStop.Jobs\DIGNDB.APP.SmitteStop.Jobs.csproj'
  buildPlatform: 'AnyCPU'

steps:

# Build the project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Building'

# Run tests and collect code coverage
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Testing/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "Code coverage" /p:Threshold=58 /p:ThresholdStat=total /p:thresholdType=line'
  displayName: 'Running tests'

# Create the deploy package for API
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/Deploy/API'
    zipAfterPublish: True
  displayName: 'Build API deployment package'

  #Create the deploy package for HangFire
- task: VSBuild@1
  inputs:
    solution: '$(hangfireProject)'
    msbuildArgs: '/p:DeployOnBuild=true /p:SkipInvalidConfigurations=true /p:OutputPath="$(System.DefaultWorkingDirectory)/Deploy/HangFire"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build HangFire deployment package'

# this uploads API as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/Deploy/API'
    artifactName: 'DIGNDB.App.SmitteStop.API'
  displayName: 'Publish API build artifacts'

#this uploads HangFire as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/Deploy/HangFire'
    artifactName: "DIGNDB.App.SmitteStop-HangFire"
  displayName: 'Publish HangFire build artifact'
